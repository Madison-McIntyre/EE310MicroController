;---------------------
; Title: 7-DigitCounter
;---------------------

// Purpose: this code creates a sequence, from 0-F based on the button pressed.
//	    if the first button is pressed the sequence will increase throught the 
//	    variables. if the other button is pressed the sequence will begin to decrement
//	    when both buttons     
// Compiler: MPLAB X IDE v6.20
// Author: Madison McIntyre
// OUTPUTS: PORTD0-7
// INPUTS: PORTB0, PORTB1
// Versions:
//  	V0.1: start code, initialize variable 3/20/24
//	V0.2: complete code, begin debug 3/22/24
//	V0.3: Debug 3/25-26/24
//	V1.0: test circuit 3/27/24
//	V1.1 fix circuit 3/28/24
//-----------------------------
;----------------
; Initialization
;----------------
    
#include "C:\Users\madmcs\MPLABProjects\7segment.X\ConfigFile.inc"
#include <xc.inc>

;---------------------    
; Program Inputs
;---------------------
#define	    buttonA	PORTB,0	    ;increment button
#define	    buttonB	PORTB,1	    ;decrement button

;---------------------
; Registers
;---------------------
delayREG    EQU	    0x10    ;outer loop for delay
delayREGB   EQU	    0x11    ;inner loop for delay
tbltop	    EQU	    0x12    ;decrement display
tblbottom   EQU	    0x13    ;increment display
   
;---------------------
; Program Outputs
;---------------------
displayOut	EQU	PORTD   ;initialize PORTD for LED

;---------------------
; Main Program
;---------------------
    PSECT absdata,abs,ovrld	; do not change

    ORG	    0x400   ;put 7segment diplay into the program memory
    DB	    0xF0    ;send to _repeat for decrement
    DB	    0x3F    ;0
    DB	    0x06    ;1
    DB	    0x5B    ;2
    DB	    0x4F    ;3
    DB	    0x66    ;4
    DB	    0x6D    ;5
    DB	    0x7C    ;6
    DB	    0x07    ;7
    DB	    0x7F    ;8
    DB	    0x67    ;9
    DB	    0x77    ;A
    DB	    0x7F    ;B
    DB	    0x39    ;C
    DB	    0x3F    ;D
    DB	    0x79    ;E
    DB	    0x71    ;F
    DB	    0xF1    ;send to _repeat for increment 
    
    ORG	    0x20
    
    CLRF   TRISD	;set all bits in PORTD to 0
    BANKSEL ANSELD
    CLRF   ANSELD
    
    SETF   TRISB	;set PORTB bits to all 1 (input)
    BANKSEL ANSELB
    CLRF   ANSELB	;set PORTB to digital
    
    MOVLW   0x11		;initilze at REG11
    MOVWF   tbltop		;toggle inputs
    MOVLW   0x01		;initilze at REG01
    MOVWF   tblbottom		;toggle inputs
	
_reset:				;put 0 on 7 segment display
    MOVLW   0x01		;initialize at REG01
    MOVWF   TBLPTRL
    MOVLW   0x04		;initilze at REG04
    MOVWF   TBLPTRH		;point TBLPTR at 0x401 in prog mem, which is
    MOVLW   0x00		;put disolay outputs in REG00
    MOVLW   TBLPTRU
    TBLRD*
    MOVFF   TABLAT,displayOut	;initilize display
    CALL    _delay 
_inc:				;increment 7 segment diplay
    BTFSS   buttonB		;check if button B is also pressed
    GOTO    _reset		;button B is pressed
    TBLRD*+			;increment
    TBLRD*			;increment display
    BTFSC   TABLAT,7		;the only case where this bit is set, is if TBLPTR
				;is either to high or too low
    CALL    _repeat		;point TBLPTR at the 0's 7 seg display
    TBLRD*
    MOVFF   TABLAT,displayOut	;move display code to display
    CALL    _delay
    GOTO    _check
_dec:				 ;decrement 7 segment display
    BTFSS   buttonA		;check if button A is also pressed
    GOTO    _reset		;button A is pressed
    TBLRD*-			;decrement 
    TBLRD*			;display decrment
    BTFSC   TABLAT,7		;if the button is pressed durong decrment
				;is either to high or too low
    CALL    _repeat		;point TBLPTR at the F's 7 seg code
    TBLRD*
    MOVFF   TABLAT,displayOut	;move display code to display
    CALL    _delay
    GOTO    _check
_check:				;check button
    BTFSS	buttonA
    GOTO	_inc		;send to _inc if button A is pressed
    BTFSS	buttonB
    GOTO	_dec		;send to _dec if button B is pressed
    GOTO	_check		;send to _check if both are pressed
_repeat:			;TBLPTR has gone too far up or down
    MOVLW   0xF1		;marker for too low
    CPFSEQ  TABLAT
    MOVFF   tbltop,TBLPTRL	;button pressed off
    MOVLW   0xF0		;marker for too high
    CPFSEQ  TABLAT
    MOVFF   tblbottom,TBLPTRL	;button is pressed on
    RETURN
    

_delay:				;create an artificial delay, after updating the display
    MOVLW   0xFF
    MOVWF   delayREG		;outerloop reg
_delaya:			;outerloop
    MOVLW   0xFF
    MOVWF   delayREGB		;innerloop reg
_delayb:			;innerloop
    NOP
    NOP
    DECF    delayREGB, 1	;decrement delayREGB, store result in delayREGB
    BNZ	    _delayb
    DECF    delayREG, 1		;innerloop has reached 0, repeat and dec outerloop once
    BNZ	    _delaya
    return			;innerloop and outerloop = 0
    
    END
